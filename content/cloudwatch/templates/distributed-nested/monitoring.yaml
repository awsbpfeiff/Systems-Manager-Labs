AWSTemplateFormatVersion: 2010-09-09
Description: This template provisions and configures all monitoring assets

Parameters:

  DBName:
      Description: WebApp Database Name
      Type: String
      Default: webapp

  DBUser:
      Description: WebApp Database User
      Type: String
      Default: webapp
      
  DBPassword:
      Description: WebApp Database User Password
      Type: String
      Default: password

  DBEndpoint:
      Description: Endpoint Name of RDS Database
      Type: String

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  VPC:
    Description: Choose which VPC we need to enable Flow Logs and Lambda
    Type: String

  Email:
    Description: >
      The email address to notify for events related to the workload (specify an
      email you have immediate access to; no email will be sent to this address
      after the lab is concluded)
    Type: String

Resources:

  CloudWatchAgentConfig:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: AmazonCloudWatch-ExampleCorpConfig
      Type: String
      Value: '{"logs":{"logs_collected":{"files":{"collect_list":[{"file_path":"/var/log/messages","log_group_name":"messages"},{"file_path":"/var/log/boot.log","log_group_name":"boot.log"},{"file_path":"/var/log/demsg","log_group_name":"demsg"},{"file_path":"/opt/webapp/log/application.log","log_group_name":"application.log"},{"file_path":"/opt/webapp/log/production.log","log_group_name":"production.log"}]}}},"metrics":{"append_dimensions":{"AutoScalingGroupName":"${aws:AutoScalingGroupName}","ImageId":"${aws:ImageId}","InstanceId":"${aws:InstanceId}","InstanceType":"${aws:InstanceType}"},"metrics_collected":{"cpu":{"measurement":["cpu_usage_idle","cpu_usage_iowait","cpu_usage_user","cpu_usage_system"],"metrics_collection_interval":60,"resources":["*"],"totalcpu":false},"disk":{"measurement":["used_percent","inodes_free"],"metrics_collection_interval":60,"resources":["*"]},"diskio":{"measurement":["io_time"],"metrics_collection_interval":60,"resources":["*"]},"mem":{"measurement":["mem_used_percent"],"metrics_collection_interval":60},"statsd":{"metrics_aggregation_interval":60,"metrics_collection_interval":10,"service_address":":8125"},"swap":{"measurement":["swap_used_percent"],"metrics_collection_interval":60}}}}'
  ExampleCorpErrorNotify:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !GetAtt 
            - RunbookExecutionFunction
            - Arn
          Protocol: lambda
        - Endpoint: !Ref Email
          Protocol: email

  ExampleCorpLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      Policies:
        - PolicyName: ExampleCorpLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CloudWatchEventsFullAccess
                Effect: Allow
                Action: 'events:*'
                Resource: '*'
              - Sid: IAMPassRoleForCloudWatchEvents
                Effect: Allow
                Action: 'iam:PassRole'
                Resource: 'arn:aws:iam::*:role/AWS_Events_Invoke_Targets'

  RunbookExecutionFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code: 
        S3Bucket: www.awsmanagementweek.com
        S3Key: DeleteBadImages.zip
      FunctionName: ExampleCorpErrorEvent
      Timeout: 30
      Handler: index.handler
      Role: !GetAtt 
        - ExampleCorpLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables: 
          database: !Ref DBName
          endpoint: !Ref DBEndpoint
          password: !Ref DBPassword
          user: !Ref DBUser

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt 
        - RunbookExecutionFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref ExampleCorpErrorNotify

  FlowLogsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: flowlogs-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Resource: !GetAtt 
                  - FlowLogGroup
                  - Arn

  FlowLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: ExampleCorpFlowLogs

  VPCFlowLog:
    Type: 'AWS::EC2::FlowLog'
    Properties:
      DeliverLogsPermissionArn: !GetAtt 
        - FlowLogsRole
        - Arn
      LogGroupName: !Ref FlowLogGroup
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL